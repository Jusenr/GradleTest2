apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.jusenr.gradletest2"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode rootProject.gitVersionCode()
        versionName rootProject.ext.VERSION_NAME
        //标记当前环境是否为测试环境(false)
        buildConfigField "boolean", "IS_JUST_TEST", "false"
        //默认API(生产环境)
        buildConfigField "String", "DOMAIN_NAME", "\"http://pic.qiantucdn.com/\""
        //版本号(1.0.1)，保留的固定值
        buildConfigField("String", "versionNumber", "\"${rootProject.ext.VERSION_NAME}\"")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("../gradletest.jks")
            storePassword "123456"
            keyAlias "gradletest"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //标记当前环境是否为测试环境(true)
            buildConfigField "boolean", "IS_JUST_TEST", "true"
            //开发环境API地址(Build Variant=xxxDebug/xxxDebug有效)
            buildConfigField "String", "DOMAIN_NAME", "\"http://pic1.16pic.com/\""
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    //源码集
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
        }
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }

    //编译过滤器'release'/'debug'
//    variantFilter { variant ->
//        def buildType = variant.buildType.name
//        def flavorName = variant.getFlavors().get(0).name// 根据构建类型，自动过滤渠道
//
//        //过滤掉类型
//        if (buildType.equalsIgnoreCase('debug')) {
//            println "======================="
//            println "variantFilter " + flavorName + " " + buildType
//            variant.setIgnore(true)
//        }
//    }

    //产品渠道配置
    productFlavors {
        dev {
            //标记当前环境是否为测试环境(true)
            buildConfigField "boolean", "IS_JUST_TEST", "true"
            //测试环境API地址(仅Build Variant=devDebug有效)
            buildConfigField "String", "DOMAIN_NAME", "\"http://tx.haiqq.com/\""
            versionName = "D" + rootProject.getVersionName()
        }
        online { versionName = "V" + defaultConfig.versionName }
//        channel_putao { versionName = "V" + defaultConfig.versionName }
//        channel_huodong { versionName = "V" + defaultConfig.versionName }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.github.bumptech.glide:glide:4.0.0-RC1'
}

//编译结束后删除unaligned包
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                println "deleting " + file.getName()
                file.delete()
            }
        }
    }
}