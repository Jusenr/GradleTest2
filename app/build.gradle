apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.jusenr.gradletest2"
        minSdkVersion rootProject.ext.MINSDK_VERSION
        targetSdkVersion rootProject.ext.TARGETSDK_VERSION
        versionCode rootProject.gitVersionCode()
        versionName rootProject.ext.VERSION_NAME
        resValue "string", "app_name", "GradleTest"
        manifestPlaceholders = [APPLICATION_ID: applicationId,
                                UMENG_APP_KEY : "1234567890",
                                QQ_APP_ID     : "app1的QQ_APP_ID",
                                AMAP_KEY      : "app1的高德地图key"]
        //标记当前环境是否为测试环境(false)
        buildConfigField "boolean", "IS_JUST_TEST", "false"
        //默认API(生产环境)
        buildConfigField "String", "DOMAIN_NAME", "\"http://pic.qiantucdn.com/\""
        buildConfigField "String", "DOMAIN_NAME1", "\"http://tx.haiqq.com/\""
        //版本号(1.0.1)，保留的固定值
        buildConfigField("String", "VERSION_NUMBER", "\"${rootProject.ext.VERSION_NAME}\"")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("../gradletest.jks")
            keyAlias "gradletest"
            storePassword "123456"
            keyPassword "123456"


//            def sPassword = null
//            def kPassword = null
//
//            Console console = System.console()
//            Console.printf "\n\nWe have to sign some things in this build." + "\n\nPlease enter your signing details.\n\n"
//            if (System.console() != null)
//                sPassword = console.readLine("PGP Key Id: ")
//            if (System.console() != null)
//                kPassword = console.readPassword("PGP Private Key Password: ")
//            Console.printf "\nThanks.\n\n"
//
//            if (sPassword == null)
//                sPassword = "123456"
//            if (kPassword == null)
//                kPassword = "123456"
//
//            storePassword sPassword
//            keyPassword kPassword
        }
    }
    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
//源码集
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
        }
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }

//编译过滤器'release'/'debug'
//    variantFilter { variant ->
//        def buildType = variant.buildType.name
//        def flavorName = variant.getFlavors().get(0).name// 根据构建类型，自动过滤渠道
//
//        //过滤掉类型
//        if (buildType.equalsIgnoreCase('debug')) {
//            println "======================="
//            println "variantFilter " + flavorName + " " + buildType
//            variant.setIgnore(true)
//        }
//    }

//产品渠道配置
    productFlavors {
        dev {
            applicationId 'com.jusenr.dev'
            resValue "string", "app_name", "GradleTest_dev"
            manifestPlaceholders = [APPLICATION_ID: applicationId]
            //标记当前环境是否为测试环境(true)
            buildConfigField "boolean", "IS_JUST_TEST", "true"
            //开发环境API地址
            buildConfigField "String", "DOMAIN_NAME", "\"http://tx.haiqq.com/\""
            buildConfigField "String", "DOMAIN_NAME1", "\"http://tx.haiqq.com/\""
            versionName = "D" + rootProject.getDevVersionName()
        }
        offline {
            applicationId 'com.jusenr.offline'
            resValue "string", "app_name", "GradleTest_offline"
            manifestPlaceholders = [APPLICATION_ID: applicationId]
            //标记当前环境是否为测试环境(true)
            buildConfigField "boolean", "IS_JUST_TEST", "true"
            //测试环境API地址
            buildConfigField "String", "DOMAIN_NAME", "\"http://pic1.16pic.com/\""
            buildConfigField "String", "DOMAIN_NAME1", "\"http://tx.haiqq.com/\""
            versionName = "T" + rootProject.getTestVersionName()
        }
        online { versionName = "V" + defaultConfig.versionName }
//        huodong { versionName = "V" + defaultConfig.versionName }
//        GooglePaly { versionName = "V" + defaultConfig.versionName }
//        xiaomi { versionName = "V" + defaultConfig.versionName }
//        umeng { versionName = "V" + defaultConfig.versionName }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

//Apk包名自定义
    applicationVariants.all {
        variant ->
            def apkFileName = rootProject.getVersionName()
            if ("debug" == variant.buildType.getName() && "dev" == variant.flavorName) {
                apkFileName = rootProject.getDevVersionName()
            }
            if ("release" == variant.buildType.getName() && "dev" == variant.flavorName) {
                apkFileName = rootProject.getTestVersionName()
            }
            if ("release" == variant.buildType.getName() && "dev" != variant.flavorName) {
                apkFileName = defaultConfig.versionName
            }
            variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", "-${apkFileName}.apk")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
            }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //umeng
    compile 'com.umeng.analytics:analytics:latest.integration'
    //glide
    compile 'com.github.bumptech.glide:glide:4.0.0-RC1'
}

//编译结束后删除unaligned包
android.applicationVariants.all {
    variant ->
        variant.assemble.doLast {
            variant.outputs.each {
                output ->
                    println "aligned " + output.outputFile
                    println "unaligned " + output.packageApplication.outputFile

                    File file = output.packageApplication.outputFile;
                    if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                        println "deleting " + file.getName()
                        file.delete()
                    }
            }
        }
}